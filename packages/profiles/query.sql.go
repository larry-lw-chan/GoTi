// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package profiles

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (name, bio, link, avatar, private, user_id, created_at, updated_at) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, bio, link, avatar, private, user_id, created_at, updated_at
`

type CreateProfileParams struct {
	Name      sql.NullString
	Bio       sql.NullString
	Link      sql.NullString
	Avatar    sql.NullString
	Private   sql.NullInt64
	UserID    int64
	CreatedAt string
	UpdatedAt string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRowContext(ctx, createProfile,
		arg.Name,
		arg.Bio,
		arg.Link,
		arg.Avatar,
		arg.Private,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Link,
		&i.Avatar,
		&i.Private,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileFromUserId = `-- name: GetProfileFromUserId :one
SELECT id, name, bio, link, avatar, private, user_id, created_at, updated_at FROM profiles WHERE user_id = ?
`

func (q *Queries) GetProfileFromUserId(ctx context.Context, userID int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileFromUserId, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Link,
		&i.Avatar,
		&i.Private,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
