package database

import (
	"context"
	"database/sql"
	"fmt"
	"log"
)

// Database Connection Code
func Connect() *sql.DB {
	db, err := sql.Open("sqlite3", "./database/sqlite3.db")
	if err != nil {
		log.Fatal(err)
	}

	if err = db.Ping(); err != nil {
		log.Fatalf("Cannot ping database because %s", err)
	}

	fmt.Println("Database Connected Successfully")
	return db
}

// Make Query Global to allow global access
var Query *Queries

func Inject(db DBTX) {
	Query = New(db)
}

// DBTX is an interface that matches *sql.DB and *sql.Tx - Generated by SQLC
type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}
